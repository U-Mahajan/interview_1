as num.partitions, log.segment.bytes, and log.retention.ms 
fetch.min.bytes, fetch.max.wait.ms, and max.poll.records 
props.put("bootstrap.servers", "localhost:9092");
props.put("acks", "all");  // or "1" or "0"
props.put("retries", 0);
props.put("batch.size", 16384);
props.put("linger.ms", 1);
props.put("buffer.memory", 33554432);
props.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");
props.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");
        props.put("bootstrap.servers", "localhost:9092");
        props.put("group.id", "my-group");
        props.put("enable.auto.commit", "true");
        props.put("auto.commit.interval.ms", "1000");
        props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
        props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
ListenableFuture<Void> future = kafkaTemplate.send(TOPIC, key, message);

WebSecurityConfigurerAdapter
CorsRegistry registry
allowedOrigins